#apn.spring.datasource.url=##FIXME
#apn.spring.datasource.username=##FIXME
#apn.spring.datasource.password=##FIXME
#apn.spring.datasource.initialize=false
#apn.spring.datasource.driver-class-name=oracle.jdbc.OracleDriver


#Tomcat params
server.port = 8090
server.servlet.context-path=/v1/pymtprtl
#spring.application.name=apn.deliveryspeed.service

#openApi parameters
springdoc.version=V1
springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.enabled=true
springdoc.api-docs.enabled=true


delmwsvc.payout.refreshdata.url=http://apnse-payoutrefreshdata-service.payments-apps-dev.svc.cluster.local:8090/v1/pymtprtl/apn/services/metadata/payoutrefreshdata/update
delmwsvc.payout.refreshdata.component=BE-PAYOUTENGINE
delmwsvc.payout.refreshdata.data=ALL
delmwsvc.payout.refreshdata.isactive=Y
delmwsvc.payout.refreshdata.operation=PYMT_MAINTENANCEWINDOW_REFRESH


ServiceId=DELMWSVC
ServiceName=delivery_maintenancewindow_v1_svc
ServiceBuildID=1

wu.resttemplate.headerpropagator.include=true
wu.webfilter.requestcontext.include=true
wu.interceptor.controller.methodname.include=true

#Show SQL
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

#application specific properties
spring.jackson.deserialization.fail-on-unknown-properties=true

#DB connection Properties

spring.datasource.url=jdbc:oracle:thin:@(DESCRIPTION = (ADDRESS = (PROTOCOL = TCPS)(HOST = vc0dbwud-scan.dev.prod.wudip.com)(PORT = 2484)) (CONNECT_DATA = (SERVER = DEDICATED) (SERVICE_NAME = WUDCRSD)))
spring.datasource.username=PAYOUTDEV11
spring.datasource.password=${secret.pymnts.apn.persistence.database.payout.password}
spring.datasource.driverClassName=oracle.jdbc.driver.OracleDriver
spring.jpa.database-platform=org.hibernate.dialect.Oracle12cDialect


# 1P Properties
logging.level.root=INFO
logging.level.org.springframework.web=DEBUG
logging.pattern.level = action=%X{signature} txId=%X{txId} partnerId=%X{partnerId} cdeTypeTx=%X{cdeTypeTx}%5p


errorevents.kafka.producer.bootstrapServers=b-1.wanv-wnp-0-msk-2.cgx40y.c4.kafka.us-east-1.amazonaws.com:9094,b-3.wanv-wnp-0-msk-2.cgx40y.c4.kafka.us-east-1.amazonaws.com:9094,b-2.wanv-wnp-0-msk-2.cgx40y.c4.kafka.us-east-1.amazonaws.com:9094
#errorevents.kafka.producer.bootstrapServers=b-2.wanv-wqa-1-msk-2.6ysszk.c4.kafka.us-east-1.amazonaws.com:9094,b-3.wanv-wqa-1-msk-2.6ysszk.c4.kafka.us-east-1.amazonaws.com:9094,b-1.wanv-wqa-1-msk-2.6ysszk.c4.kafka.us-east-1.amazonaws.com:9094
errorevents.kafka.producer.acks=1
errorevents.kafka.producer.retries=3
errorevents.kafka.producer.maxBlockTimeInMs=1000
errorevents.kafka.producer.maxInFlightRequestsPerCon=5
errorevents.kafka.producer.requestTimeoutInMs=30000
errorevents.kafka.producer.clientId=delivery_maintenancewindow_v1_svc
errorevents.kafka.producer.topic=WU.DEV.COMMON.ERROR.EVENT
errorevents.kafka.producer.key=delivery_maintenancewindow_v1_svc
errorevents.kafka.producer.securityProtocalConfig=SSL
errorevents.kafka.producer.security.sslKeyStorePwd=${secret.pymnts.apn.logging.msk.dev.keystore.password}
errorevents.kafka.producer.security.sslKeyPwd=${secret.pymnts.apn.logging.msk.dev.truststore.password}
errorevents.kafka.producer.security.keyStoreLocation=/kafka_pymtapn_keystore_nonprod.jks
errorevents.kafka.producer.security.trustStoreLocation=/kafka_client_truststore.jks



#Spring boot admin - not required for now till there is a digital instance.
#spring.application.name=${SERVICENAME}
#spring.boot.admin.client.url=http://10.5.26.5:8002/v1/common/adminserver,http://10.5.25.201:8002/v1/common/adminserver
#management.endpoints.web.exposure.include=loggers,info,health
#management.endpoint.health.show-details=always
#spring.boot.admin.client.auto-deregistration=true
#spring.boot.admin.client.instance.prefer-ip=true

apn.frontend.resources.url=
apn.frontend.imgs.url=
